#define _DEFAULT_SOURCE
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <unistd.h>
#include <string.h>

int BUF_SIZE = 1024;

struct header {
  uint64_t size;
  struct header *next;
};

void handle_error(char *msg) {
  perror(msg);
  exit(EXIT_FAILURE);
}

void print_out(char *format, void *data, size_t data_size) {
  char buf[BUF_SIZE];

  ssize_t len = snprintf(buf, BUF_SIZE, format,
                         data_size == sizeof(uint64_t) ? *(uint64_t *)data
                                                       : *(void **)data);
  if (len < 0) {
    handle_error("snprintf");
  }

  write(STDOUT_FILENO, buf, len);
}

int main(void) {
  size_t total_size = 256;
  size_t block_size = 128;
  void *base_address = sbrk(total_size);

  if (base_address == (void *)-1) {
    handle_error("sbrk failed");
  }

  struct header *block1 = (struct header *)base_address;
  block1->size = block_size;
  block1->next = NULL;

  struct header *block2 = (struct header *)((char *)base_address + 128);
  block2->size = block_size;
  block2->next = block1;

  memset((char *)block1 + sizeof(struct header), 0,
         block_size - sizeof(struct header));

  print_out("block1 size: %lu\n", &block1->size, sizeof(uint64_t));

  free(block1);
  free(block2);

  return 0;
}
