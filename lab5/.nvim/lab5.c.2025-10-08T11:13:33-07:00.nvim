#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

struct header {
  uint64_t size;
  struct header *next;
  int id;
};

void initialize_block(struct header *block, uint64_t size, struct header *next,
                      int id) {
  block->size = size;
  block->next = next;
  block->id = id;
}

int find_first_fit(struct header *free_list_ptr, uint64_t size) {
  // TODO: Implement first fit
  struct header *curr = free_list_ptr;
  while (curr) {
    if (curr->size >= size) {
      return curr->id;
    }
    curr = curr->next;
  }
  return -1;
}

int find_best_fit(struct header *free_list_ptr, uint64_t size) {
  int best_fit_id = -1;
  // TODO: Implement best fit
  uint64_t best_size = UINT64_MAX;

  struct header *curr = free_list_ptr;
  while (curr) {
    if (curr->size >= size && curr->size < best_size) {
      best_size = curr->size;
      best_fit_id = curr->id;
    }
    curr = curr->next;
  }

  return best_fit_id;
}

int find_worst_fit(struct header *free_list_ptr, uint64_t size) {
  int worst_fit_id = -1;
  uint64_t worst_size = 0;
  // TODO: Implement worst fit

  struct header *curr = free_list_ptr;

  while (curr) {
    if (curr->size >= size && curr->size > worst_size) {
      worst_size = curr->size;
      worst_fit_id = curr->id;
    }
    curr = curr->next;
  }
  return worst_fit_id;
}

int main(void) {

  struct header *free_block1 = (struct header *)malloc(sizeof(struct header));
  struct header *free_block2 = (struct header *)malloc(sizeof(struct header));
  struct header *free_block3 = (struct header *)malloc(sizeof(struct header));
  struct header *free_block4 = (struct header *)malloc(sizeof(struct header));
  struct header *free_block5 = (struct header *)malloc(sizeof(struct header));

  initialize_block(free_block1, 6, free_block2, 1);
  initialize_block(free_block2, 12, free_block3, 2);
  initialize_block(free_block3, 24, free_block4, 3);
  initialize_block(free_block4, 8, free_block5, 4);
  initialize_block(free_block5, 4, NULL, 5);

  struct header *free_list_ptr = free_block1;

  int first_fit_id = find_first_fit(free_list_ptr, 7);
  int best_fit_id = find_best_fit(free_list_ptr, 7);
  int worst_fit_id = find_worst_fit(free_list_ptr, 7);

  // TODO: Print out the IDs
  printf("The ID for the First-Fit algorithm is: %d:\n", first_fit_id);
  printf("The ID for the Best-Fit algorithm is: %d:\n", best_fit_id);
  printf("The ID for the Worst-Fit algorithm is: %d:\n", worst_fit_id);

  free(free_block1);
  free(free_block2);
  free(free_block3);
  free(free_block4);
  free(free_block5);

  /*
   * Pseudocode: (Coalescing Continguous Free Blocks) 
   * Input: Linked list of free blocks sorted by address 
   * Insert new_block into the free list in sorted order by address
   *
   * prev = NULL
   * curr = free_list_head
   *
   * Travers the list: 
   *    while (curr != NULL) {
   *      if (curr is immediately before new_block) {
   *          // merge with previous 
   *          curr->size += sizeof(struct header) + new_block->size 
   *          curr->next = new_block->next
   *          new_block = curr 
   *      } else if (new_block is immediately before curr) {
   *        // merge with next
   *        new_block->size += sizeof(struct header) + curr->size; 
   *        new_block->next = curr->next; 
   *      }
   *      prev = curr
   *      curr = curr->next
   *    }
   *
   *  After traveral we ensure no more duplicate or overlapping remain
   *
   *  return Free List with continuous blocks merged together
   */


  return 0;

}
